{"version":3,"sources":["logic/Universe.js","Info.js","App.js","serviceWorker.js","index.js"],"names":["Universe","generation","liveCells","Map","this","nextGeneration","deadCells","position","set","x","y","delete","has","isCellAlive","removeCell","addCell","forEach","item","calculateLiveCellsNeighboors","calculateDeadCellsNeighboors","liveNeighboors","i","j","Info","Game","props","changeInterval","event","state","gameRunning","setState","interval","target","value","universe","size","handleColumnChange","bind","handleRowChange","startGame","stopGame","renderBoard","storeCell","actualSize","intervalRef","setInterval","runGame","clearInterval","addGeneration","newWorld","cellRow","push","key","live","className","type","onChange","onClick","getGeneration","Component","Cell","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6a8f1123.chunk.js","sourcesContent":["export default class Universe {\r\n    constructor(generation = 0, liveCells = new Map()) {\r\n      this.generation = generation;\r\n      this.liveCells = liveCells;\r\n      this.nextGeneration = new Map();\r\n      this.deadCells = new Map();\r\n    }\r\n  \r\n    getGeneration() {\r\n      return this.generation;\r\n    }\r\n  \r\n    getLiveCells() {\r\n      return this.liveCells;\r\n    }\r\n  \r\n    addCell(position) {\r\n      this.liveCells.set(position.x + \" , \" + position.y, {x: position.x, y: position.y});\r\n    }\r\n  \r\n    removeCell(position) {\r\n      this.liveCells.delete(position);\r\n    }\r\n  \r\n    isCellAlive(position) {\r\n      return this.liveCells.has(position);\r\n    }\r\n  \r\n    storeCell(position) {\r\n      if(this.isCellAlive(position.x + \" , \" + position.y)) {\r\n        this.removeCell(position.x + \" , \" + position.y);\r\n      } else {\r\n        this.addCell(position);\r\n      }\r\n  \r\n      return new Universe(this.generation, this.liveCells);\r\n    }\r\n  \r\n    addGeneration(){\r\n      this.liveCells.forEach((item) => {\r\n        this.calculateLiveCellsNeighboors(item);\r\n      })\r\n  \r\n      this.deadCells.forEach((item) => {\r\n        this.calculateDeadCellsNeighboors(item);\r\n      })\r\n  \r\n      this.generation++;\r\n  \r\n      return new Universe(this.generation, this.nextGeneration)\r\n    }\r\n  \r\n    calculateLiveCellsNeighboors(position) {\r\n      var liveNeighboors = 0;\r\n  \r\n      for(var i = position.x - 1; i <= position.x + 1; i++){\r\n        for(var j = position.y - 1; j <= position.y + 1; j++){\r\n          \r\n          if(i === position.x && j === position.y)\r\n            continue;\r\n  \r\n          if(this.isCellAlive(i + \" , \" + j)){\r\n              liveNeighboors++;\r\n          } else {\r\n            this.deadCells.set(i + \" , \" +j, {x: i, y: j})\r\n          }\r\n        }\r\n      }\r\n  \r\n      if((liveNeighboors === 2 || liveNeighboors === 3))\r\n        this.nextGeneration.set(position.x + \" , \" + position.y, {x: position.x, y: position.y});\r\n    }\r\n  \r\n    calculateDeadCellsNeighboors(position) {\r\n      var liveNeighboors = 0;\r\n  \r\n      for(var i = position.x - 1; i <= position.x + 1; i++){\r\n        for(var j = position.y - 1; j <= position.y + 1; j++){\r\n  \r\n          if(i === position.x && j === position.y)\r\n            continue;\r\n  \r\n          if(this.isCellAlive(i + \" , \" + j)){\r\n              liveNeighboors++;\r\n            }\r\n          }\r\n        }\r\n  \r\n      if(liveNeighboors === 3)\r\n        this.nextGeneration.set(position.x + \" , \" + position.y, {x: position.x, y: position.y});\r\n    }\r\n  \r\n  }","import React from \"react\";\r\n\r\nexport default function Info() {\r\n  return (\r\n    <>\r\n      \r\n      <h2>Rules of the Game</h2>\r\n      <p>\r\n        1 - Any cell with fewer than two live neighbors dies\r\n      </p>\r\n      <p>\r\n        2 - Any cell with two or three living neighbors survives to the next\r\n        generation\r\n      </p>\r\n\r\n      <p>\r\n        3 - Any cell with four or more neighbors dies  </p>\r\n    </>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Universe from './logic/Universe';\nimport Info from \"./Info\"\n\nexport default class Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      universe: new Universe(),\n      size: [80, 20],\n      gameRunning: false,\n      interval: 50\n    }\n\n    this.handleColumnChange = this.handleColumnChange.bind(this);\n    this.handleRowChange = this.handleRowChange.bind(this);\n    this.startGame = this.startGame.bind(this);\n    this.stopGame = this.stopGame.bind(this);\n    this.renderBoard = this.renderBoard.bind(this);\n    this.storeCell = this.storeCell.bind(this);\n  }\n\n  handleRowChange(event) {\n    if(!this.state.gameRunning) {\n      var actualSize = this.state.size;\n\n      if(event.target.value < 20)\n        actualSize[1] = event.target.value;\n      else\n        actualSize[1] = 20;\n\n      this.setState({\n        size: actualSize,\n      });\n\n      this.renderBoard();\n    }\n  }\n\n  handleColumnChange(event) {\n    if(!this.state.gameRunning) {\n      var actualSize = this.state.size;\n      if(event.target.value < 80)\n        actualSize[0] = event.target.value;\n      else\n        actualSize[0] = 80;\n\n      this.setState({\n        size: actualSize,\n      });\n\n      this.renderBoard();\n    }\n  }\n\n  changeInterval = (event) => {\n    if(!this.state.gameRunning){\n      this.setState({\n        interval: event.target.value\n      })\n    }\n  }\n\n  startGame() {\n    if(!this.state.gameRunning){\n      this.setState({\n        gameRunning: true,\n      }, () => {\n        this.intervalRef = setInterval(() => this.runGame(), this.state.interval);\n      })\n    }\n  }\n\n  stopGame(){\n    this.setState({\n      gameRunning: false\n    }, () => {\n      if(this.intervalRef) {\n        clearInterval(this.intervalRef);\n      }\n    })\n  }\n\n  runGame() {\n    this.setState({\n      universe: this.state.universe.addGeneration()\n    })\n  }\n\n  storeCell(position) {\n    if(!this.state.gameRunning) {\n      this.setState({\n        universe: this.state.universe.storeCell(position)\n      })\n    }\n  }\n\n  renderBoard() {\n    var newWorld = [];\n    var cellRow = [];\n\n    for(var i = 0; i < this.state.size[0]; i++) {\n      for (var j = 0; j < this.state.size[1]; j++){\n        if(this.state.universe.isCellAlive(i + \" , \" + j)){\n          cellRow.push(\n            <Cell key={[i, j]} position={{x: i, y: j}} live={true} storeCell={this.storeCell.bind(this)}/>\n          );\n        } else {\n          cellRow.push(\n            <Cell key={[i, j]} position={{x: i, y: j}} live={false} storeCell={this.storeCell.bind(this)}/>\n          );\n        }\n      }\n      newWorld.push(<div className=\"row\" key={i}>{cellRow}</div>);\n      cellRow = [];\n    }\n\n    return newWorld;\n  }\n\n  render() {\n    return (\n      <>\n      <h1 className=\"header\">John Conway's Game Of Life</h1>\n      <div className=\"worldContainer\">\n        <div className=\"headerContainer\">\n          <div className=\"headerInnerContainer\">\n            <label className=\"label\">\n              Rows:\n              <input className=\"input\" type=\"text\" value={this.state.size[1]} onChange={this.handleRowChange} />\n            </label>\n            <label className=\"label\">\n              Columns:\n              <input className=\"input\" type=\"text\" value={this.state.size[0]} onChange={this.handleColumnChange} />\n            </label>\n            <label className=\"label\">\n              Interval:\n              <input className=\"input\" type=\"text\" value={this.state.interval} onChange={this.changeInterval} />\n            </label>\n          </div>\n          <div className=\"headerButtons\">\n            <button className=\"submit\" onClick={this.startGame}>Start</button>\n            <button className=\"submit\" onClick={this.stopGame}>Stop</button>\n          </div>\n          Generation: {this.state.universe.getGeneration()}\n        </div>\n        <div className=\"boardContainer\">\n        {this.renderBoard()}\n        </div>\n      </div>\n      <div>< Info /></div>\n      </>\n    );\n    \n  }\n  \n}\n\nclass Cell extends Component {\n  render() {\n    return (\n      <div onClick={() => this.props.storeCell(this.props.position)} className={this.props.live ? \"cellContainerLive\" : \"cellContainerDead\"}></div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}